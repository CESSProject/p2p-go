// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pois-api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoisCertifierApi_RequestMinerGetNewKey_FullMethodName      = "/pois.PoisCertifierApi/request_miner_get_new_key"
	PoisCertifierApi_RequestMinerCommitGenChall_FullMethodName = "/pois.PoisCertifierApi/request_miner_commit_gen_chall"
	PoisCertifierApi_RequestVerifyCommitProof_FullMethodName   = "/pois.PoisCertifierApi/request_verify_commit_proof"
	PoisCertifierApi_RequestVerifyDeletionProof_FullMethodName = "/pois.PoisCertifierApi/request_verify_deletion_proof"
)

// PoisCertifierApiClient is the client API for PoisCertifierApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoisCertifierApiClient interface {
	RequestMinerGetNewKey(ctx context.Context, in *RequestMinerInitParam, opts ...grpc.CallOption) (*ResponseMinerInitParam, error)
	RequestMinerCommitGenChall(ctx context.Context, in *RequestMinerCommitGenChall, opts ...grpc.CallOption) (*Challenge, error)
	RequestVerifyCommitProof(ctx context.Context, in *RequestVerifyCommitAndAccProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error)
	RequestVerifyDeletionProof(ctx context.Context, in *RequestVerifyDeletionProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error)
}

type poisCertifierApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPoisCertifierApiClient(cc grpc.ClientConnInterface) PoisCertifierApiClient {
	return &poisCertifierApiClient{cc}
}

func (c *poisCertifierApiClient) RequestMinerGetNewKey(ctx context.Context, in *RequestMinerInitParam, opts ...grpc.CallOption) (*ResponseMinerInitParam, error) {
	out := new(ResponseMinerInitParam)
	err := c.cc.Invoke(ctx, PoisCertifierApi_RequestMinerGetNewKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisCertifierApiClient) RequestMinerCommitGenChall(ctx context.Context, in *RequestMinerCommitGenChall, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, PoisCertifierApi_RequestMinerCommitGenChall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisCertifierApiClient) RequestVerifyCommitProof(ctx context.Context, in *RequestVerifyCommitAndAccProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error) {
	out := new(ResponseVerifyCommitOrDeletionProof)
	err := c.cc.Invoke(ctx, PoisCertifierApi_RequestVerifyCommitProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisCertifierApiClient) RequestVerifyDeletionProof(ctx context.Context, in *RequestVerifyDeletionProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error) {
	out := new(ResponseVerifyCommitOrDeletionProof)
	err := c.cc.Invoke(ctx, PoisCertifierApi_RequestVerifyDeletionProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoisCertifierApiServer is the server API for PoisCertifierApi service.
// All implementations must embed UnimplementedPoisCertifierApiServer
// for forward compatibility
type PoisCertifierApiServer interface {
	RequestMinerGetNewKey(context.Context, *RequestMinerInitParam) (*ResponseMinerInitParam, error)
	RequestMinerCommitGenChall(context.Context, *RequestMinerCommitGenChall) (*Challenge, error)
	RequestVerifyCommitProof(context.Context, *RequestVerifyCommitAndAccProof) (*ResponseVerifyCommitOrDeletionProof, error)
	RequestVerifyDeletionProof(context.Context, *RequestVerifyDeletionProof) (*ResponseVerifyCommitOrDeletionProof, error)
	mustEmbedUnimplementedPoisCertifierApiServer()
}

// UnimplementedPoisCertifierApiServer must be embedded to have forward compatible implementations.
type UnimplementedPoisCertifierApiServer struct {
}

func (UnimplementedPoisCertifierApiServer) RequestMinerGetNewKey(context.Context, *RequestMinerInitParam) (*ResponseMinerInitParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMinerGetNewKey not implemented")
}
func (UnimplementedPoisCertifierApiServer) RequestMinerCommitGenChall(context.Context, *RequestMinerCommitGenChall) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMinerCommitGenChall not implemented")
}
func (UnimplementedPoisCertifierApiServer) RequestVerifyCommitProof(context.Context, *RequestVerifyCommitAndAccProof) (*ResponseVerifyCommitOrDeletionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifyCommitProof not implemented")
}
func (UnimplementedPoisCertifierApiServer) RequestVerifyDeletionProof(context.Context, *RequestVerifyDeletionProof) (*ResponseVerifyCommitOrDeletionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifyDeletionProof not implemented")
}
func (UnimplementedPoisCertifierApiServer) mustEmbedUnimplementedPoisCertifierApiServer() {}

// UnsafePoisCertifierApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoisCertifierApiServer will
// result in compilation errors.
type UnsafePoisCertifierApiServer interface {
	mustEmbedUnimplementedPoisCertifierApiServer()
}

func RegisterPoisCertifierApiServer(s grpc.ServiceRegistrar, srv PoisCertifierApiServer) {
	s.RegisterService(&PoisCertifierApi_ServiceDesc, srv)
}

func _PoisCertifierApi_RequestMinerGetNewKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMinerInitParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisCertifierApiServer).RequestMinerGetNewKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisCertifierApi_RequestMinerGetNewKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisCertifierApiServer).RequestMinerGetNewKey(ctx, req.(*RequestMinerInitParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisCertifierApi_RequestMinerCommitGenChall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMinerCommitGenChall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisCertifierApiServer).RequestMinerCommitGenChall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisCertifierApi_RequestMinerCommitGenChall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisCertifierApiServer).RequestMinerCommitGenChall(ctx, req.(*RequestMinerCommitGenChall))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisCertifierApi_RequestVerifyCommitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVerifyCommitAndAccProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisCertifierApiServer).RequestVerifyCommitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisCertifierApi_RequestVerifyCommitProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisCertifierApiServer).RequestVerifyCommitProof(ctx, req.(*RequestVerifyCommitAndAccProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisCertifierApi_RequestVerifyDeletionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVerifyDeletionProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisCertifierApiServer).RequestVerifyDeletionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisCertifierApi_RequestVerifyDeletionProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisCertifierApiServer).RequestVerifyDeletionProof(ctx, req.(*RequestVerifyDeletionProof))
	}
	return interceptor(ctx, in, info, handler)
}

// PoisCertifierApi_ServiceDesc is the grpc.ServiceDesc for PoisCertifierApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoisCertifierApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pois.PoisCertifierApi",
	HandlerType: (*PoisCertifierApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request_miner_get_new_key",
			Handler:    _PoisCertifierApi_RequestMinerGetNewKey_Handler,
		},
		{
			MethodName: "request_miner_commit_gen_chall",
			Handler:    _PoisCertifierApi_RequestMinerCommitGenChall_Handler,
		},
		{
			MethodName: "request_verify_commit_proof",
			Handler:    _PoisCertifierApi_RequestVerifyCommitProof_Handler,
		},
		{
			MethodName: "request_verify_deletion_proof",
			Handler:    _PoisCertifierApi_RequestVerifyDeletionProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pois-api.proto",
}

const (
	PoisVerifierApi_RequestSpaceProofVerifySingleBlock_FullMethodName = "/pois.PoisVerifierApi/request_space_proof_verify_single_block"
	PoisVerifierApi_RequestVerifySpaceTotal_FullMethodName            = "/pois.PoisVerifierApi/request_verify_space_total"
)

// PoisVerifierApiClient is the client API for PoisVerifierApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoisVerifierApiClient interface {
	RequestSpaceProofVerifySingleBlock(ctx context.Context, in *RequestSpaceProofVerify, opts ...grpc.CallOption) (*ResponseSpaceProofVerify, error)
	RequestVerifySpaceTotal(ctx context.Context, in *RequestSpaceProofVerifyTotal, opts ...grpc.CallOption) (*ResponseSpaceProofVerifyTotal, error)
}

type poisVerifierApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPoisVerifierApiClient(cc grpc.ClientConnInterface) PoisVerifierApiClient {
	return &poisVerifierApiClient{cc}
}

func (c *poisVerifierApiClient) RequestSpaceProofVerifySingleBlock(ctx context.Context, in *RequestSpaceProofVerify, opts ...grpc.CallOption) (*ResponseSpaceProofVerify, error) {
	out := new(ResponseSpaceProofVerify)
	err := c.cc.Invoke(ctx, PoisVerifierApi_RequestSpaceProofVerifySingleBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisVerifierApiClient) RequestVerifySpaceTotal(ctx context.Context, in *RequestSpaceProofVerifyTotal, opts ...grpc.CallOption) (*ResponseSpaceProofVerifyTotal, error) {
	out := new(ResponseSpaceProofVerifyTotal)
	err := c.cc.Invoke(ctx, PoisVerifierApi_RequestVerifySpaceTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoisVerifierApiServer is the server API for PoisVerifierApi service.
// All implementations must embed UnimplementedPoisVerifierApiServer
// for forward compatibility
type PoisVerifierApiServer interface {
	RequestSpaceProofVerifySingleBlock(context.Context, *RequestSpaceProofVerify) (*ResponseSpaceProofVerify, error)
	RequestVerifySpaceTotal(context.Context, *RequestSpaceProofVerifyTotal) (*ResponseSpaceProofVerifyTotal, error)
	mustEmbedUnimplementedPoisVerifierApiServer()
}

// UnimplementedPoisVerifierApiServer must be embedded to have forward compatible implementations.
type UnimplementedPoisVerifierApiServer struct {
}

func (UnimplementedPoisVerifierApiServer) RequestSpaceProofVerifySingleBlock(context.Context, *RequestSpaceProofVerify) (*ResponseSpaceProofVerify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSpaceProofVerifySingleBlock not implemented")
}
func (UnimplementedPoisVerifierApiServer) RequestVerifySpaceTotal(context.Context, *RequestSpaceProofVerifyTotal) (*ResponseSpaceProofVerifyTotal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifySpaceTotal not implemented")
}
func (UnimplementedPoisVerifierApiServer) mustEmbedUnimplementedPoisVerifierApiServer() {}

// UnsafePoisVerifierApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoisVerifierApiServer will
// result in compilation errors.
type UnsafePoisVerifierApiServer interface {
	mustEmbedUnimplementedPoisVerifierApiServer()
}

func RegisterPoisVerifierApiServer(s grpc.ServiceRegistrar, srv PoisVerifierApiServer) {
	s.RegisterService(&PoisVerifierApi_ServiceDesc, srv)
}

func _PoisVerifierApi_RequestSpaceProofVerifySingleBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceProofVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisVerifierApiServer).RequestSpaceProofVerifySingleBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisVerifierApi_RequestSpaceProofVerifySingleBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisVerifierApiServer).RequestSpaceProofVerifySingleBlock(ctx, req.(*RequestSpaceProofVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisVerifierApi_RequestVerifySpaceTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceProofVerifyTotal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisVerifierApiServer).RequestVerifySpaceTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoisVerifierApi_RequestVerifySpaceTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisVerifierApiServer).RequestVerifySpaceTotal(ctx, req.(*RequestSpaceProofVerifyTotal))
	}
	return interceptor(ctx, in, info, handler)
}

// PoisVerifierApi_ServiceDesc is the grpc.ServiceDesc for PoisVerifierApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoisVerifierApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pois.PoisVerifierApi",
	HandlerType: (*PoisVerifierApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request_space_proof_verify_single_block",
			Handler:    _PoisVerifierApi_RequestSpaceProofVerifySingleBlock_Handler,
		},
		{
			MethodName: "request_verify_space_total",
			Handler:    _PoisVerifierApi_RequestVerifySpaceTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pois-api.proto",
}
