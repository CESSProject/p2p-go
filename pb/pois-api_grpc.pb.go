// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pois-api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoisApiClient is the client API for PoisApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoisApiClient interface {
	RequestMinerGetNewKey(ctx context.Context, in *RequestMinerInitParam, opts ...grpc.CallOption) (*ResponseMinerInitParam, error)
	RequestMinerCommitGenChall(ctx context.Context, in *RequestMinerCommitGenChall, opts ...grpc.CallOption) (*Challenge, error)
	RequestVerifyCommitProof(ctx context.Context, in *RequestVerifyCommitAndAccProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error)
	RequestSpaceProofVerifySingleBlock(ctx context.Context, in *RequestSpaceProofVerify, opts ...grpc.CallOption) (*ResponseSpaceProofVerify, error)
	RequestVerifySpaceTotal(ctx context.Context, in *RequestSpaceProofVerifyTotal, opts ...grpc.CallOption) (*ResponseSpaceProofVerifyTotal, error)
	RequestVerifyDeletionProof(ctx context.Context, in *RequestVerifyDeletionProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error)
}

type poisApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPoisApiClient(cc grpc.ClientConnInterface) PoisApiClient {
	return &poisApiClient{cc}
}

func (c *poisApiClient) RequestMinerGetNewKey(ctx context.Context, in *RequestMinerInitParam, opts ...grpc.CallOption) (*ResponseMinerInitParam, error) {
	out := new(ResponseMinerInitParam)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_miner_get_new_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisApiClient) RequestMinerCommitGenChall(ctx context.Context, in *RequestMinerCommitGenChall, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_miner_commit_gen_chall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisApiClient) RequestVerifyCommitProof(ctx context.Context, in *RequestVerifyCommitAndAccProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error) {
	out := new(ResponseVerifyCommitOrDeletionProof)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_verify_commit_proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisApiClient) RequestSpaceProofVerifySingleBlock(ctx context.Context, in *RequestSpaceProofVerify, opts ...grpc.CallOption) (*ResponseSpaceProofVerify, error) {
	out := new(ResponseSpaceProofVerify)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_space_proof_verify_single_block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisApiClient) RequestVerifySpaceTotal(ctx context.Context, in *RequestSpaceProofVerifyTotal, opts ...grpc.CallOption) (*ResponseSpaceProofVerifyTotal, error) {
	out := new(ResponseSpaceProofVerifyTotal)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_verify_space_total", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poisApiClient) RequestVerifyDeletionProof(ctx context.Context, in *RequestVerifyDeletionProof, opts ...grpc.CallOption) (*ResponseVerifyCommitOrDeletionProof, error) {
	out := new(ResponseVerifyCommitOrDeletionProof)
	err := c.cc.Invoke(ctx, "/pois.api.PoisApi/request_verify_deletion_proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoisApiServer is the server API for PoisApi service.
// All implementations must embed UnimplementedPoisApiServer
// for forward compatibility
type PoisApiServer interface {
	RequestMinerGetNewKey(context.Context, *RequestMinerInitParam) (*ResponseMinerInitParam, error)
	RequestMinerCommitGenChall(context.Context, *RequestMinerCommitGenChall) (*Challenge, error)
	RequestVerifyCommitProof(context.Context, *RequestVerifyCommitAndAccProof) (*ResponseVerifyCommitOrDeletionProof, error)
	RequestSpaceProofVerifySingleBlock(context.Context, *RequestSpaceProofVerify) (*ResponseSpaceProofVerify, error)
	RequestVerifySpaceTotal(context.Context, *RequestSpaceProofVerifyTotal) (*ResponseSpaceProofVerifyTotal, error)
	RequestVerifyDeletionProof(context.Context, *RequestVerifyDeletionProof) (*ResponseVerifyCommitOrDeletionProof, error)
	mustEmbedUnimplementedPoisApiServer()
}

// UnimplementedPoisApiServer must be embedded to have forward compatible implementations.
type UnimplementedPoisApiServer struct {
}

func (UnimplementedPoisApiServer) RequestMinerGetNewKey(context.Context, *RequestMinerInitParam) (*ResponseMinerInitParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMinerGetNewKey not implemented")
}
func (UnimplementedPoisApiServer) RequestMinerCommitGenChall(context.Context, *RequestMinerCommitGenChall) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMinerCommitGenChall not implemented")
}
func (UnimplementedPoisApiServer) RequestVerifyCommitProof(context.Context, *RequestVerifyCommitAndAccProof) (*ResponseVerifyCommitOrDeletionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifyCommitProof not implemented")
}
func (UnimplementedPoisApiServer) RequestSpaceProofVerifySingleBlock(context.Context, *RequestSpaceProofVerify) (*ResponseSpaceProofVerify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSpaceProofVerifySingleBlock not implemented")
}
func (UnimplementedPoisApiServer) RequestVerifySpaceTotal(context.Context, *RequestSpaceProofVerifyTotal) (*ResponseSpaceProofVerifyTotal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifySpaceTotal not implemented")
}
func (UnimplementedPoisApiServer) RequestVerifyDeletionProof(context.Context, *RequestVerifyDeletionProof) (*ResponseVerifyCommitOrDeletionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVerifyDeletionProof not implemented")
}
func (UnimplementedPoisApiServer) mustEmbedUnimplementedPoisApiServer() {}

// UnsafePoisApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoisApiServer will
// result in compilation errors.
type UnsafePoisApiServer interface {
	mustEmbedUnimplementedPoisApiServer()
}

func RegisterPoisApiServer(s grpc.ServiceRegistrar, srv PoisApiServer) {
	s.RegisterService(&PoisApi_ServiceDesc, srv)
}

func _PoisApi_RequestMinerGetNewKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMinerInitParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestMinerGetNewKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_miner_get_new_key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestMinerGetNewKey(ctx, req.(*RequestMinerInitParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisApi_RequestMinerCommitGenChall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMinerCommitGenChall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestMinerCommitGenChall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_miner_commit_gen_chall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestMinerCommitGenChall(ctx, req.(*RequestMinerCommitGenChall))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisApi_RequestVerifyCommitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVerifyCommitAndAccProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestVerifyCommitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_verify_commit_proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestVerifyCommitProof(ctx, req.(*RequestVerifyCommitAndAccProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisApi_RequestSpaceProofVerifySingleBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceProofVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestSpaceProofVerifySingleBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_space_proof_verify_single_block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestSpaceProofVerifySingleBlock(ctx, req.(*RequestSpaceProofVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisApi_RequestVerifySpaceTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceProofVerifyTotal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestVerifySpaceTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_verify_space_total",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestVerifySpaceTotal(ctx, req.(*RequestSpaceProofVerifyTotal))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoisApi_RequestVerifyDeletionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVerifyDeletionProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoisApiServer).RequestVerifyDeletionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pois.api.PoisApi/request_verify_deletion_proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoisApiServer).RequestVerifyDeletionProof(ctx, req.(*RequestVerifyDeletionProof))
	}
	return interceptor(ctx, in, info, handler)
}

// PoisApi_ServiceDesc is the grpc.ServiceDesc for PoisApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoisApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pois.api.PoisApi",
	HandlerType: (*PoisApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request_miner_get_new_key",
			Handler:    _PoisApi_RequestMinerGetNewKey_Handler,
		},
		{
			MethodName: "request_miner_commit_gen_chall",
			Handler:    _PoisApi_RequestMinerCommitGenChall_Handler,
		},
		{
			MethodName: "request_verify_commit_proof",
			Handler:    _PoisApi_RequestVerifyCommitProof_Handler,
		},
		{
			MethodName: "request_space_proof_verify_single_block",
			Handler:    _PoisApi_RequestSpaceProofVerifySingleBlock_Handler,
		},
		{
			MethodName: "request_verify_space_total",
			Handler:    _PoisApi_RequestVerifySpaceTotal_Handler,
		},
		{
			MethodName: "request_verify_deletion_proof",
			Handler:    _PoisApi_RequestVerifyDeletionProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pois-api.proto",
}
