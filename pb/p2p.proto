syntax = "proto3";

package p2p.api;

option go_package = "./;pb";

// designed to be shared between all app protocols
message MessageData {
    // shared between all requests
    string clientVersion = 1; // client version
    string id = 2; // allows requesters to use request data when processing a response
    string nodeId = 3; // id of node that created the message (not the peer that may have sent it). =base58(multihash(nodePubKey))
    bytes nodePubKey = 4; // Authoring node Secp256k1 public key (32bytes) - protobufs serielized
    bytes sign = 5; // signature of message data + method specific data by message authoring node.
    int64 timestamp = 6; // unix time
    bool gossip = 7; // true to have receiver peer gossip the message to neighbors 
}

//// read data protocol

// a protocol define a set of reuqest and responses
message ReadDataRequest {
    // generic message
    MessageData messageData = 1;
    // file name
    string Name = 2;
}

message ReadDataResponse {
    // generic message
    MessageData messageData = 1;
    // Data is the returned data
    bytes Data = 2;
    // Data length
    int64 DataLength = 3;
    // response code
    uint32 Code = 4;
    // response message
    string Msg = 5;
}

//// read data stat protocol

// a protocol define a set of reuqest and responses
message ReadDataStatRequest {
    // generic message
    MessageData messageData = 1;
    // file name
    string Name = 2;
}

message ReadDataStatResponse {
    // generic message
    MessageData messageData = 1;
    // Code indicates the result of this transfer
    uint32 code = 2;
    // Offset is the write offset the receiver wants
    int64 size = 3;
    // response message
    string msg = 4;
}

//// write data protocol

message WriteDataRequest {
    // generic message
    MessageData messageData = 1;
    // Fid
    string Fid = 2;
    // Datahash = sha256sum(Data)
    string Datahash = 3;
    // Data
    bytes Data = 4;
    // Data length
    int64 DataLength = 5;
}

message WriteDataResponse {
    // generic message
    MessageData messageData = 1;
    // response code
    uint32 Code = 2;
    // response message
    string Msg = 3;
}